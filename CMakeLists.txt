cmake_minimum_required(VERSION 3.16)
include(FetchContent)

if(NOT WIN32)
  string(ASCII 27 Esc)
  set(ColourReset "${Esc}[m")
  set(ColourBold  "${Esc}[1m")
  set(Red         "${Esc}[31m")
  set(Green       "${Esc}[92m")
  set(Yellow      "${Esc}[33m")
  set(Blue        "${Esc}[34m")
  set(Magenta     "${Esc}[35m")
  set(Cyan        "${Esc}[36m")
  set(White       "${Esc}[37m")
  set(BoldRed     "${Esc}[1;31m")
  set(BoldGreen   "${Esc}[1;32m")
  set(BoldYellow  "${Esc}[1;33m")
  set(BoldBlue    "${Esc}[1;34m")
  set(BoldMagenta "${Esc}[1;35m")
  set(BoldCyan    "${Esc}[1;36m")
  set(BoldWhite   "${Esc}[1;37m")
endif()
project(Hogercas)
set(CMAKE_EXPORT_COMPILE_COMMANDS True)
set(CMAKE_CXX_STANDARD 20)
set(CXX_STANDARD 20)

if(CMAKE_CONFIGURATION_TYPES)
  list(APPEND CMAKE_CONFIGURATION_TYPES Coverage)
  list(APPEND CMAKE_CONFIGURATION_TYPES Maxspeed)
  list(APPEND CMAKE_CONFIGURATION_TYPES Ctime)
  list(REMOVE_DUPLICATES CMAKE_CONFIGURATION_TYPES)
  set(CMAKE_CONFIGURATION_TYPES "${CMAKE_CONFIGURATION_TYPES}" CACHE STRING
    "Add the configurations that we need"
    FORCE)
endif()
FetchContent_Declare(
    pohxx
    GIT_REPOSITORY https://github.com/Fytch/ProgramOptions.hxx
)
FetchContent_GetProperties(pohxx)
if(NOT pohxx_POPULATED)
    FetchContent_Populate(pohxx)
    add_subdirectory(${pohxx_SOURCE_DIR} ${pohxx_BINARY_DIR})
endif()
if(NOT CMAKE_BUILD_TYPE)
    message("${Yellow}Build type not specified, assuming Debug mode${ColourReset}")
    set(CMAKE_BUILD_TYPE Debug)
endif()
set (Kackvar -fprofile-dir="${CMAKE_CURRENT_BINARY_DIR}/coverage")
set(CMAKE_CXX_FLAGS_COVERAGE "--coverage -lgcov -fprofile-arcs -ftest-coverage")
set(CMAKE_CXX_FLAGS_CTIME "-w")
set(CMAKE_CXX_FLAGS_DEBUG "-g3 -fsanitize=address -fsanitize=undefined -D_GLIBCXX_DEBUG")
set(CMAKE_CXX_FLAGS_RELEASE "-Os -flto -s -fomit-frame-pointer -DNDEBUG -march=native")
set(CMAKE_CXX_FLAGS_MAXSPEED "-Ofast -funroll-loops -s -DNDEBUG -flto -fomit-frame-pointer -march=native")
add_definitions(-DBOOST_ASIO_DISABLE_CONCEPTS)
file(GLOB hogercas_src "src/*.cpp" "include/*.hpp")
add_executable(hogercas ${hogercas_src})
target_link_libraries(hogercas "mpfr")
target_link_libraries(hogercas "gmp")
target_link_libraries(hogercas "gmpxx")
target_link_libraries(hogercas "readline")
target_link_libraries(hogercas "gcov")
target_link_libraries(hogercas ProgramOptionsHxx)
target_include_directories(hogercas PRIVATE include)
target_include_directories(hogercas PRIVATE "ext/PO/include")
if(BUILD_TESTS)
  file(GLOB hogertest_src "tester/tester.cpp")
  add_executable(tester ${hogertest_src})
  target_include_directories(tester PRIVATE include)
  target_link_libraries(tester "pthread")
  target_link_libraries(tester "boost_system")
endif()
